### Login

POST {{api}}/auth/login
Content-Type: application/json

{
  "username": "bruce",
  "password": "1234"
}

> {%
  client.test("Request executed successfully", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });

  client.global.set("auth_token", response.body.token);
%}

### Me

GET {{api}}/user/me
Authorization: Bearer {{auth_token}}

> {%
  client.test("Request executed successfully", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### Create a client

POST {{api}}/client
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "name": "Test"
}

> {%
  client.test("Request executed successfully", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.global.set('client', response.body.id);
%}

### Get the created client

GET {{api}}/client/{{client}}
Authorization: Bearer {{auth_token}}

> {%
  client.test("Request executed successfully", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.test("Client id is right", function() {
    client.assert(Number(response.body.id) === Number(client.global.get('client')));
  });
%}

### Get all clients

GET {{api}}/client
Authorization: Bearer {{auth_token}}

> {%
  client.test("Request executed successfully", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
  client.test("Client is in response", function() {
    client.assert(response.body.items.filter(function(item) {
      return Number(item.id) === Number(client.global.get('client'))
    }).length === 1);
  });
  client.test("Client is first item", function() {
    client.assert(Number(response.body.items[0].id) === Number(client.global.get('client')));
  });
%}

### Delete the created client

DELETE {{api}}/client/{{client}}
Authorization: Bearer {{auth_token}}

> {%
  client.test("Request executed successfully", function() {
    client.assert(response.status === 200, "Response status is not 200");
  });
%}

### Get the deleted client

GET {{api}}/client/{{client}}
Authorization: Bearer {{auth_token}}

> {%
  client.test("Not found", function() {
    client.assert(response.status === 404, "Response status is not 404");
  });
%}
